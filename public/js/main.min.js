'use strict';

class Card {
	constructor() {
		this._cards = Array.from(document.querySelectorAll('.card'));
		this._is_liked = 'card__button_is-liked';
		this._is_disliked = 'card__button_is-disliked';
		this._svg_liked = 'svg__card_is-liked';
		this._svg_disliked = 'svg__card_is-disliked';

		this._addEventListener();
	}

	_addEventListener() {
		this._cards.forEach(card => {
			card.addEventListener('click', _ => {
				const dislike_button = card.querySelector('.card__button_dislike');
				const like_button = card.querySelector('.card__button_like');
				const dislike_svg = card.querySelectorAll('svg')[0];
				const like_svg = card.querySelectorAll('svg')[1];

				const current_card = {
					dislike_button: dislike_button,
					like_button: like_button,
					dislike_svg: dislike_svg,
					like_svg: like_svg
				};

				this._handleCard(current_card);
			})
		});
	}

	_handleCard(current_card) {
		current_card.dislike_button.addEventListener('click', _ => {
			this._toggleCardButton(current_card);
		});

		current_card.like_button.addEventListener('click', _ => {
			this._toggleCardButton(current_card);
		});
	}

	_toggleCardButton(button, svg) {}
}

new Card();
'use strict';

class Filter {
	constructor() {
		this._buttons = Array.from(document.querySelectorAll('.filter__button'));
		this._active = 'filter__button_active';

		this._addEventListener();
	}

	_addEventListener() {
		this._buttons.forEach(button => {
			button.addEventListener('click', _ => this._activateButton(button));
		});
	}

	_activateButton(current_button) {
		if (current_button.classList.contains(this._active)) return;

		//disactivate the other buttons.
		current_button.classList.add(this._active);
		this._buttons.forEach(button => {
			if (button !== current_button) button.classList.remove(this._active);
		});

		//get the url and get the page out of it.
		//then replace the current page content with the new content.
		const url = current_button.href;
		//new FetchPage(url, container);
	}
}

new Filter();
'use strict';
'use strict';

class Menu {
    constructor() {
        this.showButtonEl = document.querySelector('.js-menu-show');
        this.hideButtonEl = document.querySelector('.js-menu-hide');
        this.sideNavEl = document.querySelector('.js-side-nav');
        this.sideNavContainerEl = document.querySelector('.js-side-nav-container');

        this.showSideNav = this.showSideNav.bind(this);
        this.hideSideNav = this.hideSideNav.bind(this);
        this.blockClicks = this.blockClicks.bind(this);
        this.onTouchStart = this.onTouchStart.bind(this);
        this.onTouchMove = this.onTouchMove.bind(this);
        this.onTouchEnd = this.onTouchEnd.bind(this);
        this.onTransitionEnd = this.onTransitionEnd.bind(this);
        this.update = this.update.bind(this);

        this.startX = 0;
        this.currentX = 0;
        this.touchingSideNav = false;

        this.transitionEndProperty = null;
        this.transitionEndTime = 0;

        this.supportsPassive = undefined;
        this.addEventListeners();
    }

    applyPassive() {
        if (this.supportsPassive !== undefined) {
            return this.supportsPassive ? { passive: true } : false;
        }
        
        let isSupported = false;
        try {
            document.addEventListener('test', null, {
                get passive() {
                    isSupported = true;
                }
            });
        } catch (e) { }
        this.supportsPassive = isSupported;
        return this.applyPassive();
    }

    addEventListeners() {
        this.showButtonEl.addEventListener('click', this.showSideNav);
        this.hideButtonEl.addEventListener('click', this.hideSideNav);
        this.sideNavEl.addEventListener('click', this.hideSideNav);
        this.sideNavContainerEl.addEventListener('click', this.blockClicks);

        this.sideNavEl.addEventListener('touchstart', this.onTouchStart, this.applyPassive());
        this.sideNavEl.addEventListener('touchmove', this.onTouchMove, this.applyPassive());
        this.sideNavEl.addEventListener('touchend', this.onTouchEnd);
    }

    onTouchStart(evt) {
        if (!this.sideNavEl.classList.contains('side-nav--visible'))
            return;

        this.startX = evt.touches[0].pageX;
        this.currentX = this.startX;

        this.touchingSideNav = true;
        requestAnimationFrame(this.update);
    }

    onTouchMove(evt) {
        if (!this.touchingSideNav)
            return;

        this.currentX = evt.touches[0].pageX;
    }

    onTouchEnd(evt) {
        if (!this.touchingSideNav)
            return;

        this.touchingSideNav = false;

        const translateX = Math.min(0, this.currentX - this.startX);
        this.sideNavContainerEl.style.transform = '';

        if (translateX < 0) {
            this.hideSideNav();
        }
    }

    update() {
        if (!this.touchingSideNav)
            return;

        requestAnimationFrame(this.update);

        const translateX = Math.min(0, this.currentX - this.startX);
        this.sideNavContainerEl.style.transform = `translateX(${translateX}px)`;
    }

    blockClicks(evt) {
        evt.stopPropagation();
    }

    onTransitionEnd(evt) {
        if (evt.propertyName != this.transitionEndProperty && evt.elapsedTime != this.transitionEndTime) {
            return;
        }

        this.transitionEndProperty = null;
        this.transitionEndTime = 0;

        this.sideNavEl.classList.remove('side-nav--animatable');
        this.sideNavEl.removeEventListener('transitionend', this.onTransitionEnd);
    }

    showSideNav() {
        this.sideNavEl.classList.add('side-nav--animatable');
        this.sideNavEl.classList.add('side-nav--visible');

        this.transitionEndProperty = 'transform';
        this.transitionEndTime = 0.33;

        this.sideNavEl.addEventListener('transitionend', this.onTransitionEnd);
    }

    hideSideNav() {
        this.sideNavEl.classList.add('side-nav--animatable');
        this.sideNavEl.classList.remove('side-nav--visible');

        this.transitionEndProperty = 'transform';
        this.transitionEndTime = 0.13;

        this.sideNavEl.addEventListener('transitionend', this.onTransitionEnd);
    }
}

new Menu();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
