'use strict';
'use strict';

class Menu {
    constructor() {
        this.showButtonEl = document.querySelector('.js-menu-show');
        this.hideButtonEl = document.querySelector('.js-menu-hide');
        this.sideNavEl = document.querySelector('.js-side-nav');
        this.sideNavContainerEl = document.querySelector('.js-side-nav-container');

        this.showSideNav = this.showSideNav.bind(this);
        this.hideSideNav = this.hideSideNav.bind(this);
        this.blockClicks = this.blockClicks.bind(this);
        this.onTouchStart = this.onTouchStart.bind(this);
        this.onTouchMove = this.onTouchMove.bind(this);
        this.onTouchEnd = this.onTouchEnd.bind(this);
        this.onTransitionEnd = this.onTransitionEnd.bind(this);
        this.update = this.update.bind(this);

        this.startX = 0;
        this.currentX = 0;
        this.touchingSideNav = false;

        this.transitionEndProperty = null;
        this.transitionEndTime = 0;

        this.supportsPassive = undefined;
        this.addEventListeners();
    }

    applyPassive() {
        if (this.supportsPassive !== undefined) {
            return this.supportsPassive ? { passive: true } : false;
        }
        
        let isSupported = false;
        try {
            document.addEventListener('test', null, {
                get passive() {
                    isSupported = true;
                }
            });
        } catch (e) { }
        this.supportsPassive = isSupported;
        return this.applyPassive();
    }

    addEventListeners() {
        this.showButtonEl.addEventListener('click', this.showSideNav);
        this.hideButtonEl.addEventListener('click', this.hideSideNav);
        this.sideNavEl.addEventListener('click', this.hideSideNav);
        this.sideNavContainerEl.addEventListener('click', this.blockClicks);

        this.sideNavEl.addEventListener('touchstart', this.onTouchStart, this.applyPassive());
        this.sideNavEl.addEventListener('touchmove', this.onTouchMove, this.applyPassive());
        this.sideNavEl.addEventListener('touchend', this.onTouchEnd);
    }

    onTouchStart(evt) {
        if (!this.sideNavEl.classList.contains('side-nav--visible'))
            return;

        this.startX = evt.touches[0].pageX;
        this.currentX = this.startX;

        this.touchingSideNav = true;
        requestAnimationFrame(this.update);
    }

    onTouchMove(evt) {
        if (!this.touchingSideNav)
            return;

        this.currentX = evt.touches[0].pageX;
    }

    onTouchEnd(evt) {
        if (!this.touchingSideNav)
            return;

        this.touchingSideNav = false;

        const translateX = Math.min(0, this.currentX - this.startX);
        this.sideNavContainerEl.style.transform = '';

        if (translateX < 0) {
            this.hideSideNav();
        }
    }

    update() {
        if (!this.touchingSideNav)
            return;

        requestAnimationFrame(this.update);

        const translateX = Math.min(0, this.currentX - this.startX);
        this.sideNavContainerEl.style.transform = `translateX(${translateX}px)`;
    }

    blockClicks(evt) {
        evt.stopPropagation();
    }

    onTransitionEnd(evt) {
        if (evt.propertyName != this.transitionEndProperty && evt.elapsedTime != this.transitionEndTime) {
            return;
        }

        this.transitionEndProperty = null;
        this.transitionEndTime = 0;

        this.sideNavEl.classList.remove('side-nav--animatable');
        this.sideNavEl.removeEventListener('transitionend', this.onTransitionEnd);
    }

    showSideNav() {
        this.sideNavEl.classList.add('side-nav--animatable');
        this.sideNavEl.classList.add('side-nav--visible');

        this.transitionEndProperty = 'transform';
        this.transitionEndTime = 0.33;

        this.sideNavEl.addEventListener('transitionend', this.onTransitionEnd);
    }

    hideSideNav() {
        this.sideNavEl.classList.add('side-nav--animatable');
        this.sideNavEl.classList.remove('side-nav--visible');

        this.transitionEndProperty = 'transform';
        this.transitionEndTime = 0.13;

        this.sideNavEl.addEventListener('transitionend', this.onTransitionEnd);
    }
}

new Menu();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzL21haW4uanMiLCJqcy9tZW51LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJtYWluLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JzsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5jbGFzcyBNZW51IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuc2hvd0J1dHRvbkVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLW1lbnUtc2hvdycpO1xyXG4gICAgICAgIHRoaXMuaGlkZUJ1dHRvbkVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLW1lbnUtaGlkZScpO1xyXG4gICAgICAgIHRoaXMuc2lkZU5hdkVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXNpZGUtbmF2Jyk7XHJcbiAgICAgICAgdGhpcy5zaWRlTmF2Q29udGFpbmVyRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtc2lkZS1uYXYtY29udGFpbmVyJyk7XHJcblxyXG4gICAgICAgIHRoaXMuc2hvd1NpZGVOYXYgPSB0aGlzLnNob3dTaWRlTmF2LmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5oaWRlU2lkZU5hdiA9IHRoaXMuaGlkZVNpZGVOYXYuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLmJsb2NrQ2xpY2tzID0gdGhpcy5ibG9ja0NsaWNrcy5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMub25Ub3VjaFN0YXJ0ID0gdGhpcy5vblRvdWNoU3RhcnQuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLm9uVG91Y2hNb3ZlID0gdGhpcy5vblRvdWNoTW92ZS5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMub25Ub3VjaEVuZCA9IHRoaXMub25Ub3VjaEVuZC5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMub25UcmFuc2l0aW9uRW5kID0gdGhpcy5vblRyYW5zaXRpb25FbmQuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZSA9IHRoaXMudXBkYXRlLmJpbmQodGhpcyk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhcnRYID0gMDtcclxuICAgICAgICB0aGlzLmN1cnJlbnRYID0gMDtcclxuICAgICAgICB0aGlzLnRvdWNoaW5nU2lkZU5hdiA9IGZhbHNlO1xyXG5cclxuICAgICAgICB0aGlzLnRyYW5zaXRpb25FbmRQcm9wZXJ0eSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy50cmFuc2l0aW9uRW5kVGltZSA9IDA7XHJcblxyXG4gICAgICAgIHRoaXMuc3VwcG9ydHNQYXNzaXZlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgIH1cclxuXHJcbiAgICBhcHBseVBhc3NpdmUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3VwcG9ydHNQYXNzaXZlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3VwcG9ydHNQYXNzaXZlID8geyBwYXNzaXZlOiB0cnVlIH0gOiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IGlzU3VwcG9ydGVkID0gZmFsc2U7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndGVzdCcsIG51bGwsIHtcclxuICAgICAgICAgICAgICAgIGdldCBwYXNzaXZlKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzU3VwcG9ydGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyB9XHJcbiAgICAgICAgdGhpcy5zdXBwb3J0c1Bhc3NpdmUgPSBpc1N1cHBvcnRlZDtcclxuICAgICAgICByZXR1cm4gdGhpcy5hcHBseVBhc3NpdmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRFdmVudExpc3RlbmVycygpIHtcclxuICAgICAgICB0aGlzLnNob3dCdXR0b25FbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuc2hvd1NpZGVOYXYpO1xyXG4gICAgICAgIHRoaXMuaGlkZUJ1dHRvbkVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oaWRlU2lkZU5hdik7XHJcbiAgICAgICAgdGhpcy5zaWRlTmF2RWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhpZGVTaWRlTmF2KTtcclxuICAgICAgICB0aGlzLnNpZGVOYXZDb250YWluZXJFbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuYmxvY2tDbGlja3MpO1xyXG5cclxuICAgICAgICB0aGlzLnNpZGVOYXZFbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5vblRvdWNoU3RhcnQsIHRoaXMuYXBwbHlQYXNzaXZlKCkpO1xyXG4gICAgICAgIHRoaXMuc2lkZU5hdkVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMub25Ub3VjaE1vdmUsIHRoaXMuYXBwbHlQYXNzaXZlKCkpO1xyXG4gICAgICAgIHRoaXMuc2lkZU5hdkVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5vblRvdWNoRW5kKTtcclxuICAgIH1cclxuXHJcbiAgICBvblRvdWNoU3RhcnQoZXZ0KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnNpZGVOYXZFbC5jbGFzc0xpc3QuY29udGFpbnMoJ3NpZGUtbmF2LS12aXNpYmxlJykpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgdGhpcy5zdGFydFggPSBldnQudG91Y2hlc1swXS5wYWdlWDtcclxuICAgICAgICB0aGlzLmN1cnJlbnRYID0gdGhpcy5zdGFydFg7XHJcblxyXG4gICAgICAgIHRoaXMudG91Y2hpbmdTaWRlTmF2ID0gdHJ1ZTtcclxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy51cGRhdGUpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uVG91Y2hNb3ZlKGV2dCkge1xyXG4gICAgICAgIGlmICghdGhpcy50b3VjaGluZ1NpZGVOYXYpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgdGhpcy5jdXJyZW50WCA9IGV2dC50b3VjaGVzWzBdLnBhZ2VYO1xyXG4gICAgfVxyXG5cclxuICAgIG9uVG91Y2hFbmQoZXZ0KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnRvdWNoaW5nU2lkZU5hdilcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICB0aGlzLnRvdWNoaW5nU2lkZU5hdiA9IGZhbHNlO1xyXG5cclxuICAgICAgICBjb25zdCB0cmFuc2xhdGVYID0gTWF0aC5taW4oMCwgdGhpcy5jdXJyZW50WCAtIHRoaXMuc3RhcnRYKTtcclxuICAgICAgICB0aGlzLnNpZGVOYXZDb250YWluZXJFbC5zdHlsZS50cmFuc2Zvcm0gPSAnJztcclxuXHJcbiAgICAgICAgaWYgKHRyYW5zbGF0ZVggPCAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGlkZVNpZGVOYXYoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKCkge1xyXG4gICAgICAgIGlmICghdGhpcy50b3VjaGluZ1NpZGVOYXYpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMudXBkYXRlKTtcclxuXHJcbiAgICAgICAgY29uc3QgdHJhbnNsYXRlWCA9IE1hdGgubWluKDAsIHRoaXMuY3VycmVudFggLSB0aGlzLnN0YXJ0WCk7XHJcbiAgICAgICAgdGhpcy5zaWRlTmF2Q29udGFpbmVyRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoJHt0cmFuc2xhdGVYfXB4KWA7XHJcbiAgICB9XHJcblxyXG4gICAgYmxvY2tDbGlja3MoZXZ0KSB7XHJcbiAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uVHJhbnNpdGlvbkVuZChldnQpIHtcclxuICAgICAgICBpZiAoZXZ0LnByb3BlcnR5TmFtZSAhPSB0aGlzLnRyYW5zaXRpb25FbmRQcm9wZXJ0eSAmJiBldnQuZWxhcHNlZFRpbWUgIT0gdGhpcy50cmFuc2l0aW9uRW5kVGltZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnRyYW5zaXRpb25FbmRQcm9wZXJ0eSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy50cmFuc2l0aW9uRW5kVGltZSA9IDA7XHJcblxyXG4gICAgICAgIHRoaXMuc2lkZU5hdkVsLmNsYXNzTGlzdC5yZW1vdmUoJ3NpZGUtbmF2LS1hbmltYXRhYmxlJyk7XHJcbiAgICAgICAgdGhpcy5zaWRlTmF2RWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHRoaXMub25UcmFuc2l0aW9uRW5kKTtcclxuICAgIH1cclxuXHJcbiAgICBzaG93U2lkZU5hdigpIHtcclxuICAgICAgICB0aGlzLnNpZGVOYXZFbC5jbGFzc0xpc3QuYWRkKCdzaWRlLW5hdi0tYW5pbWF0YWJsZScpO1xyXG4gICAgICAgIHRoaXMuc2lkZU5hdkVsLmNsYXNzTGlzdC5hZGQoJ3NpZGUtbmF2LS12aXNpYmxlJyk7XHJcblxyXG4gICAgICAgIHRoaXMudHJhbnNpdGlvbkVuZFByb3BlcnR5ID0gJ3RyYW5zZm9ybSc7XHJcbiAgICAgICAgdGhpcy50cmFuc2l0aW9uRW5kVGltZSA9IDAuMzM7XHJcblxyXG4gICAgICAgIHRoaXMuc2lkZU5hdkVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCB0aGlzLm9uVHJhbnNpdGlvbkVuZCk7XHJcbiAgICB9XHJcblxyXG4gICAgaGlkZVNpZGVOYXYoKSB7XHJcbiAgICAgICAgdGhpcy5zaWRlTmF2RWwuY2xhc3NMaXN0LmFkZCgnc2lkZS1uYXYtLWFuaW1hdGFibGUnKTtcclxuICAgICAgICB0aGlzLnNpZGVOYXZFbC5jbGFzc0xpc3QucmVtb3ZlKCdzaWRlLW5hdi0tdmlzaWJsZScpO1xyXG5cclxuICAgICAgICB0aGlzLnRyYW5zaXRpb25FbmRQcm9wZXJ0eSA9ICd0cmFuc2Zvcm0nO1xyXG4gICAgICAgIHRoaXMudHJhbnNpdGlvbkVuZFRpbWUgPSAwLjEzO1xyXG5cclxuICAgICAgICB0aGlzLnNpZGVOYXZFbC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgdGhpcy5vblRyYW5zaXRpb25FbmQpO1xyXG4gICAgfVxyXG59XHJcblxyXG5uZXcgTWVudSgpOyJdfQ==
