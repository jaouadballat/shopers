'use strict';

class Card {
	constructor() {
		this._cards = Array.from(document.querySelectorAll('.card'));
		this._is_liked = 'card__button_is-liked';
		this._is_disliked = 'card__button_is-disliked';
		this._svg_liked = 'svg__card_is-liked';
		this._svg_disliked = 'svg__card_is-disliked';

		this._addEventListener();
	}

	_addEventListener() {
		this._cards.forEach(card => {
			const the_buttons = Array.from(card.querySelectorAll('.card__button'));
			
			this._handleCard(the_buttons, card);
		});
	}

	_handleCard(buttons, card) {
		buttons.forEach(button => {
			button.addEventListener('click', _ => this._toggleCardButton(button, buttons, card));
		});
	}

	_toggleCardButton(current_button, buttons, card) {
		if (current_button.classList.contains('card__button_dislike')) {
			this._removeCard(current_button, card, 'disliked');
		} else if (current_button.classList.contains('card__button_like')) {
			this._removeCard(current_button, card, 'liked');
		} else {
			this._removeCard(current_button, card);
		}
	}

	_removeCard(button, card, status) {
		const url = button.getAttribute('data-href');

		if (status === 'liked') this._cardStatus(url, card, status);
		else if (status === 'disliked') this._cardStatus(url, card, undefined, status);
		else this._cardStatus(url, card);

		card.classList.add('card__is-removed');
		setTimeout(_ => card.classList.add('hidden'), 400);
	}

	_cardStatus(url, card, like, disliked) {
		const id = card.getAttribute('data-shop');
		const user_id = card.getAttribute('data-user');
		const data = {
			'id': id,
			'like': like || undefined,
			'disliked': disliked || undefined,
			'user_id': user_id
		}

		const options = {
			method: 'PUT',
			body: JSON.stringify(data),
			headers: {'content-type': 'application/json'}
		};

		fetch(url, options)
			.then(res => res.json())
			.then(response => console.log(response));
	}
}

new Card();
'use strict';

class Filter {
	constructor() {
		this._buttons = Array.from(document.querySelectorAll('.filter__button'));
		this._active = 'filter__button_active';

		this._addEventListener();
	}

	_addEventListener() {
		this._buttons.forEach(button => {
			button.addEventListener('click', _ => this._activateButton(button));
		});
	}

	_activateButton(current_button) {
		if (current_button.classList.contains(this._active)) return;

		//disactivate the other buttons.
		current_button.classList.add(this._active);
		this._buttons.forEach(button => {
			if (button !== current_button) button.classList.remove(this._active);
		});
	}
}

new Filter();
'use strict';

class FetchPage {
    constructor() {
        this._triggers = Array.from(document.querySelectorAll('.fetch'));
        this._tabs = Array.from(document.querySelectorAll('.nav__tab'));
        this._container = document.querySelector('.main');
        this._tmp_container = document.querySelector('.tmp');
        this._loader = document.querySelector('.loader');
        this._cards = Array.from(document.querySelectorAll('.card'));

        this._addEventListener();
        this._refresh(this._cards);
    }

    _addEventListener() {
        this._triggers.forEach(trigger => {
            trigger.addEventListener('click', event => this._getPage(event));
        });
    }

    _getPage(event) {
        event.preventDefault();
        const trigger = event.target
        const url = trigger.href;


        fetch(url)
            .then(res => res.text())
            .then(response => {
                this._loader.classList.remove('hidden');
                this._tmp_container.innerHTML = response;

                this._render(this._tmp_container);
                this._loader.classList.add('hidden');

                this._setTab(this._tabs, trigger);
            });
    }

    _render(tmp) {
        console.log(tmp);
        const content = tmp.querySelector('.main');
        this._container.innerHTML = "";
        this._container.appendChild(content);
        this._container.classList.add('page__is-added');

        setTimeout(_ => this._container.classList.remove('page__is-added'), 400);
        new Card();
    }

    _setTab(tabs, current_tab) {
        if (current_tab.classList.contains('nav__tab')) {
            current_tab.classList.add('nav__tab_current');
            tabs.forEach(tab => {
                if (tab !== current_tab) tab.classList.remove('nav__tab_current')
            });
        }
    }

    _refresh(cards) {
        if (cards.length === 0) {
            fetch('/')
                .then(res => res.text())
                .then(response => {
                    this._loader.classList.remove('hidden');
                    this._tmp_container.innerHTML = response;

                    this._render(this._tmp_container);
                    this._loader.classList.add('hidden');
                });
        }
    }
}

new FetchPage();
'use strict';

class Menu {
    constructor() {
        this.showButtonEl = document.querySelector('.js-menu-show');
        this.hideButtonEl = document.querySelector('.js-menu-hide');
        this.sideNavEl = document.querySelector('.js-side-nav');
        this.sideNavContainerEl = document.querySelector('.js-side-nav-container');

        this.showSideNav = this.showSideNav.bind(this);
        this.hideSideNav = this.hideSideNav.bind(this);
        this.blockClicks = this.blockClicks.bind(this);
        this.onTouchStart = this.onTouchStart.bind(this);
        this.onTouchMove = this.onTouchMove.bind(this);
        this.onTouchEnd = this.onTouchEnd.bind(this);
        this.onTransitionEnd = this.onTransitionEnd.bind(this);
        this.update = this.update.bind(this);

        this.startX = 0;
        this.currentX = 0;
        this.touchingSideNav = false;

        this.transitionEndProperty = null;
        this.transitionEndTime = 0;

        this.supportsPassive = undefined;
        this._addEventListeners();
    }

    applyPassive() {
        if (this.supportsPassive !== undefined) {
            return this.supportsPassive ? { passive: true } : false;
        }
        
        let isSupported = false;
        try {
            document.addEventListener('test', null, {
                get passive() {
                    isSupported = true;
                }
            });
        } catch (e) { }
        this.supportsPassive = isSupported;
        return this.applyPassive();
    }

    _addEventListeners() {
        this.showButtonEl.addEventListener('click', this.showSideNav);
        this.hideButtonEl.addEventListener('click', this.hideSideNav);
        this.sideNavEl.addEventListener('click', this.hideSideNav);
        this.sideNavContainerEl.addEventListener('click', this.blockClicks);

        this.sideNavEl.addEventListener('touchstart', this.onTouchStart, this.applyPassive());
        this.sideNavEl.addEventListener('touchmove', this.onTouchMove, this.applyPassive());
        this.sideNavEl.addEventListener('touchend', this.onTouchEnd);
    }

    onTouchStart(evt) {
        if (!this.sideNavEl.classList.contains('side-nav--visible'))
            return;

        this.startX = evt.touches[0].pageX;
        this.currentX = this.startX;

        this.touchingSideNav = true;
        requestAnimationFrame(this.update);
    }

    onTouchMove(evt) {
        if (!this.touchingSideNav)
            return;

        this.currentX = evt.touches[0].pageX;
    }

    onTouchEnd(evt) {
        if (!this.touchingSideNav)
            return;

        this.touchingSideNav = false;

        const translateX = Math.min(0, this.currentX - this.startX);
        this.sideNavContainerEl.style.transform = '';

        if (translateX < 0) {
            this.hideSideNav();
        }
    }

    update() {
        if (!this.touchingSideNav)
            return;

        requestAnimationFrame(this.update);

        const translateX = Math.min(0, this.currentX - this.startX);
        this.sideNavContainerEl.style.transform = `translateX(${translateX}px)`;
    }

    blockClicks(evt) {
        evt.stopPropagation();
    }

    onTransitionEnd(evt) {
        if (evt.propertyName != this.transitionEndProperty && evt.elapsedTime != this.transitionEndTime) {
            return;
        }

        this.transitionEndProperty = null;
        this.transitionEndTime = 0;

        this.sideNavEl.classList.remove('side-nav--animatable');
        this.sideNavEl.removeEventListener('transitionend', this.onTransitionEnd);
    }

    showSideNav() {
        this.sideNavEl.classList.add('side-nav--animatable');
        this.sideNavEl.classList.add('side-nav--visible');

        this.transitionEndProperty = 'transform';
        this.transitionEndTime = 0.33;

        this.sideNavEl.addEventListener('transitionend', this.onTransitionEnd);
    }

    hideSideNav() {
        this.sideNavEl.classList.add('side-nav--animatable');
        this.sideNavEl.classList.remove('side-nav--visible');

        this.transitionEndProperty = 'transform';
        this.transitionEndTime = 0.13;

        this.sideNavEl.addEventListener('transitionend', this.onTransitionEnd);
    }
}

new Menu();
'use strict';

if ('serviceWorker' in navigator) {
    addEventListener('load', function () {
        navigator.serviceWorker.register(
            '/sw.js', { scope: '.' }
        );
    });
}

if (navigator.onLine) addEventListener('online', _ => document.body.classList.remove('offline'));
else appOffline();

addEventListener('offline', _ => appOffline());
addEventListener('online', _ => document.body.classList.remove('offline'));

function appOffline() {
    document.body.classList.add('offline');
    Array.from(document.querySelectorAll('a')).forEach(link => {
        linkIsAvailableOffline(link).then(res => {
            if (res) link.classList.add('cached');
        });
    });
}

function linkIsAvailableOffline(link) {
    const url = link.href;
    console.log(url);
    return caches.match(url)
        .then(res => {
            if (res) {
                if (res.status === 200) return true;
            }
        });
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
